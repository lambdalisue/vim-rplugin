*vim-rplugin.txt*	Library to support Neovim/Vim8 compatible rplugin

Version: 0.1.0
Author:  Alisue <lambdalisue@hashnote.net>
Support: Vim 7.4 and above
License: MIT license

=============================================================================
CONTENTS					*vim-rplugin-contents*

USAGE				|vim-rplugin-usage|
  NEOVIM			|vim-rplugin-neovim|
  VIM				|vim-rplugin-vim|


=============================================================================
USAGE						*vim-XXXXX-usage*

Use rplugin.Neovim proxy class to

- Adds vim.call(name, *args) interface
- Returns str instead of bytes in Python 3
- Returns '\udc80' instead of b'\x80' for special key in |getchar()|
  function

See an example plugin repository at

http://github.com/lambdalisue/vim-rplugin-test

Or follow the instruction below.

-----------------------------------------------------------------------------
NEOVIM						*vim-rplugin-neovim*

Assume that there is rplugin/python3/demo.py with the following content:
>
	try:
	    import neovim

            @neovim.plugin
            class Entrypoint:
                def __init__(self, nvim):
                    self.nvim = nvim
                    self.registry = Registry(nvim)

                @neovim.function('_demo_regget', sync=True)
                def regget(self, args):
                    return self.registry.get(*args)

                @neovim.function('_demo_regset', sync=True)
                def regset(self, args):
                    self.registry.set(*args)

	except ImportError:
	    pass

	class Registry:
	    def __init__(self, nvim):
	        self.nvim = nvim

	    def get(self, regnam):
	        return self.nvim.call('getreg', regname)

	    def set(self, regname, value):
	        self.nvim.call('setreg', regname, value)
<
Then create autoload/demo.vim with the following content as an entry point.
>
	if has('nvim')
	  function! demo#regget(regname) abort
	    return _demo_regget(a:regname)
	  endfunction
	  function! demo#regset(regname, value) abort
	    call _demo_regset(a:regname, a:value)
	  endfunction
	endif
<
-----------------------------------------------------------------------------
VIM						*vim-rplugin-vim*

To use a Registry class in rplugin/python3/demo.py, create an
autoload/demo/rplugin.vim with the following content:
>
	let s:rep = expand('<sfile>:p:h:h:h')
	
	function! demo#rplugin#init() abort
	  if exists('s:result')
	    return s:result
	  endif
	  let s:result = rplugin#init(s:rep, {
	        \ 'python': 0,
	        \ 'python3': 1,
	        \})
	  return s:result
	endfunction
	
	
	function! demo#rplugin#regget(regname) abort
	  if !demo#rplugin#init().python3
	    return
	  endif
	  let result = ['']
	  python3 << EOC
	def _temporary_scope():
	    import vim
	    import rplugin
	    import demo
	
	    # Decorate vim instance with Neovim proxy class
	    nvim = rplugin.Neovim(vim)
	
	    regname = nvim.eval('a:regname')
	    result = nvim.bindeval('result')
	
	    registry = demo.Registry(nvim)
	    result[0] = registry.get(regname)
	_temporary_scope()
	del _temporary_scope
	EOC
	  return result[0]
	endfunction
	
	
	function! demo#rplugin#regset(regname, value) abort
	  if !demo#rplugin#init().python3
	    return
	  endif
	  let result = ['']
	  python3 << EOC
	def _temporary_scope():
	    import vim
	    import rplugin
	    import demo
	
	    # Decorate vim instance with Neovim proxy class
	    nvim = rplugin.Neovim(vim)
	
	    regname = nvim.eval('a:regname')
	    value = nvim.eval('a:value')
	
	    registry = demo.Registry(nvim)
	    registry.set(regname, value)
	_temporary_scope()
	del _temporary_scope
	EOC
	endfunction
<
And then modify an autoload/demo.vim as:
>
	if has('nvim')
	  function! demo#regget(regname) abort
	    return _demo_regget(a:regname)
	  endfunction
	
	  function! demo#regset(regname, value) abort
	    call _demo_regset(a:regname, a:value)
	  endfunction
	else
	  function! demo#regget(regname) abort
	    return demo#rplugin#regget(a:regname)
	  endfunction
	
	  function! demo#regset(regname, value) abort
	    call demo#rplugin#regset(a:regname, a:value)
	  endfunction
	endif
<
Done. demo#regget() and demo#regset() should work on both Neovim and Vim :-)


=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
